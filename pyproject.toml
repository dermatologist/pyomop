[project]
name = "pyomop"
dynamic = ["version"]
description = "OMOP CDM utils in Python"
authors = [{ name = "Bell Eapen", email = "github_public@gulfdoctor.net" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.11,<4.0"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Operating System :: OS Independent",
]
dependencies = [
    "sqlalchemy>=1.4",
    "click",
    "pandas",
    "aiosqlite",
    "asyncpg",
    "requests",
    "greenlet",
    "fhiry"
]


[project.urls]
Homepage = "https://dermatologist.github.io/pyomop/"
Repository = "https://github.com/dermatologist/pyomop"
Documentation = "https://dermatologist.github.io/pyomop/"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.23.0",
    "mypy>=0.991",
    "pytest-cov>=4.0.0",
    "ruff>=0.11.5",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.uv-dynamic-versioning]
fallback-version = "0.1.0"

[tool.uv.build-backend]
source-exclude = [
  "tests/*",
  "examples/*",
  "docs/*",
  "notes/*",
  "notebooks/*"
]

[project.scripts]
pyomop = "pyomop.main:main_routine"

[project.optional-dependencies]
llm = [
    "llama-index",
    "llama-index-experimental",
    "langchain",
    "langchain-community",
    "langchain-huggingface",
    "llama-index-embeddings-langchain",
    "overrides",
    "llama-index-llms-google-genai",
    "llama-index-llms-langchain",
]

[tool.hatch.build.targets.wheel]
packages = ["src/pyomop"]

[tool.mypy]
files = ["src"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
addopts = """
--cov src.pyomop --cov-report term-missing
--verbose
"""
norecursedirs = ["dist", "build", ".tox"]
testpaths = ["tests"]

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]

